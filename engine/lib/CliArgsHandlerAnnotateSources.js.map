{"version":3,"file":"CliArgsHandlerAnnotateSources.js","sourceRoot":"","sources":["CliArgsHandlerAnnotateSources.ts"],"names":[],"mappings":";;;AAAA,6FAAyF;AAIzF,MAAa,6BAA6B;IACjC,aAAa,CAAC,gBAA2B;QAC9C,OAAO,gBAAgB;aACpB,OAAO,CAAC;YACP,eAAe,EAAE;gBACf,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,kCAAkC;gBAC5C,OAAO,EAAE;oBACP,OAAO;iBACR;aACF;SACF,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAyB,EAAE,OAA4B;QAC7E,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,OAAO,CAAC,8DAA6B,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;SACpF;IACH,CAAC;CACF;AAnBD,sEAmBC","sourcesContent":["import { KeysRdfResolveHypermediaLinks } from '@comunica/context-entries-link-traversal';\nimport type { ICliArgsHandler } from '@comunica/types';\nimport type { Argv } from 'yargs';\n\nexport class CliArgsHandlerAnnotateSources implements ICliArgsHandler {\n  public populateYargs(argumentsBuilder: Argv<any>): Argv<any> {\n    return argumentsBuilder\n      .options({\n        annotateSources: {\n          type: 'string',\n          describe: 'Annotate data with their sources',\n          choices: [\n            'graph',\n          ],\n        },\n      });\n  }\n\n  public async handleArgs(args: Record<string, any>, context: Record<string, any>): Promise<void> {\n    if (args.annotateSources) {\n      context[KeysRdfResolveHypermediaLinks.annotateSources.name] = args.annotateSources;\n    }\n  }\n}\n"]}